<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>池式结构 on Gao&#39;s happy day</title>
    <link>https://gao377020481.github.io/tags/%E6%B1%A0%E5%BC%8F%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 池式结构 on Gao&#39;s happy day</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://gao377020481.github.io/tags/%E6%B1%A0%E5%BC%8F%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>内存池</title>
      <link>https://gao377020481.github.io/p/%E5%86%85%E5%AD%98%E6%B1%A0/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gao377020481.github.io/p/%E5%86%85%E5%AD%98%E6%B1%A0/</guid>
      <description>#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; #define MP_ALIGNMENT 32 //对齐信息 #define MP_PAGE_SIZE	4096 //单次分配大块大小 #define MP_MAX_ALLOC_FROM_POOL	(MP_PAGE_SIZE-1)  #define mp_align(n, alignment) (((n)+(alignment-1)) &amp;amp; ~(alignment-1)) #define mp_align_ptr(p, alignment) (void *)((((size_t)p)+(alignment-1)) &amp;amp; ~(alignment-1))  struct mp_large_s { struct mp_large_s *next; void *alloc; }; // 当单次分配超过pagesize时就需要一次分配然后归入large的一个链表中保存  struct mp_node_s { unsigned char *last; unsigned char *end; struct mp_node_s *next; size_t failed; };// 页内的小区域，用于小块的分配  struct mp_pool_s { size_t max; struct mp_node_s *current; struct mp_large_s *large; struct mp_node_s head[0]; }; //内存池  struct mp_pool_s *mp_create_pool(size_t size); void mp_destory_pool(struct mp_pool_s *pool); void *mp_alloc(struct mp_pool_s *pool, size_t size); void *mp_nalloc(struct mp_pool_s *pool, size_t size); void *mp_calloc(struct mp_pool_s *pool, size_t size); void mp_free(struct mp_pool_s *pool, void *p); //首先需要明确，在分配的时候需要将所有的数据结构都存在我们管理的内存池中 //比如struct mp_pool_s *pool这个内存池本身也需要受我们管理 struct mp_pool_s *mp_create_pool(size_t size) { struct mp_pool_s *p; int ret = posix_memalign((void **)&amp;amp;p, MP_ALIGNMENT, size + sizeof(struct mp_pool_s) + sizeof(struct mp_node_s)); //posix_memalign 分配足够的内存，size（page_size：4096） 加上内存池本身和小块结构本身 	if (ret) { return NULL; } p-&amp;gt;max = (size &amp;lt; MP_MAX_ALLOC_FROM_POOL) ?</description>
    </item>
    
    <item>
      <title>线程池</title>
      <link>https://gao377020481.github.io/p/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gao377020481.github.io/p/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>线程池 基本功能模块：  线程池创建函数 线程池删除函数 线程池回调函数 线程池添加函数 线程池数据结构 线程任务数据结构 线程本身数据结构（由pid唯一确认）  首先实现数据结构： 线程任务数据结构：
struct nTask { void (*task_func)(struct nTask *task); void *user_data; struct nTask *prev; struct nTask *next; }; 这是任务中的一个个体，任务队列头存储在线程池数据结构中 void (*task_func)(struct nTask *task)函数指针表明函数为task_func且参数为struct nTask， 参数若为void是否更好
线程本身数据结构：
struct nWorker { pthread_t threadid; int terminate; struct nManager *manager; struct nWorker *prev; struct nWorker *next; }; pid唯一标识线程，terminate用于标识该线程应被删除，存储manager（也就是所属线程池）是为了通过manager找到task队列以获取task
线程池数据结构：
typedef struct nManager { struct nTask *tasks; struct nWorker *workers; pthread_mutex_t mutex; pthread_cond_t cond; } ThreadPool; 可以看到线程池其实只是一个管理者，使用mutex控制各个线程对进程内公共资源的访问，保证同时只有一个线程在访问公共资源，cond来控制各个线程的状态（处于等待队列（阻塞）或可以运行（运行、就绪态））细节在回调函数中</description>
    </item>
    
    <item>
      <title>线程池进阶版</title>
      <link>https://gao377020481.github.io/p/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%9B%E9%98%B6%E7%89%88/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gao377020481.github.io/p/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%BF%9B%E9%98%B6%E7%89%88/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt; #include &amp;lt;pthread.h&amp;gt; #define LL_ADD(item, list) do { \ item-&amp;gt;prev = NULL;	\ item-&amp;gt;next = list;	\ list = item;	\ } while(0)  #define LL_REMOVE(item, list) do {	\ if (item-&amp;gt;prev != NULL) item-&amp;gt;prev-&amp;gt;next = item-&amp;gt;next;	\ if (item-&amp;gt;next != NULL) item-&amp;gt;next-&amp;gt;prev = item-&amp;gt;prev;	\ if (list == item) list = item-&amp;gt;next;	\ item-&amp;gt;prev = item-&amp;gt;next = NULL;	\ } while(0)  typedef struct NWORKER {//工作线程信息 	pthread_t thread; //线程id 	int terminate; //是否要终止 	struct NWORKQUEUE *workqueue; //线程池，用于找到工作队列 	struct NWORKER *prev; struct NWORKER *next; } nWorker; typedef struct NJOB { //工作个体 	void (*job_function)(struct NJOB *job); void *user_data; struct NJOB *prev; struct NJOB *next; } nJob; typedef struct NWORKQUEUE { struct NWORKER *workers; //所有工作线程的链表 	struct NJOB *waiting_jobs; //工作队列 	pthread_mutex_t jobs_mtx; pthread_cond_t jobs_cond; } nWorkQueue; typedef nWorkQueue nThreadPool; static void *ntyWorkerThread(void *ptr) { //工作线程取用工作 	nWorker *worker = (nWorker*)ptr; while (1) { pthread_mutex_lock(&amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_mtx); //先获取工作队列的操作互斥锁  while (worker-&amp;gt;workqueue-&amp;gt;waiting_jobs == NULL) { if (worker-&amp;gt;terminate) break; pthread_cond_wait(&amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_cond, &amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_mtx); //如果工作队列为空，这个线程就阻塞在条件变量上等待事件发生 	} if (worker-&amp;gt;terminate) { pthread_mutex_unlock(&amp;amp;worker-&amp;gt;workqueue-&amp;gt;jobs_mtx); //如果检测到工作线程被终止，那么这个线程就需要结束工作，但在结束工作前需要将对工作队列的取用权限放开，所以这里在break前需要解锁这个互斥锁 	break; } nJob *job = worker-&amp;gt;workqueue-&amp;gt;waiting_jobs; //从工作队列中获取一个工作 	if (job !</description>
    </item>
    
    <item>
      <title>请求池</title>
      <link>https://gao377020481.github.io/p/%E8%AF%B7%E6%B1%82%E6%B1%A0/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gao377020481.github.io/p/%E8%AF%B7%E6%B1%82%E6%B1%A0/</guid>
      <description>同步阻塞请求池 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt; #include &amp;lt;errno.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/socket.h&amp;gt;#include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;sys/epoll.h&amp;gt;#include &amp;lt;netdb.h&amp;gt;#include &amp;lt;arpa/inet.h&amp;gt; #include &amp;lt;pthread.h&amp;gt; #define DNS_SVR	&amp;#34;114.114.114.114&amp;#34;  #define DNS_HOST	0x01 #define DNS_CNAME	0x05  struct dns_header { unsigned short id; unsigned short flags; unsigned short qdcount; unsigned short ancount; unsigned short nscount; unsigned short arcount; }; struct dns_question { int length; unsigned short qtype; unsigned short qclass; char *qname; }; struct dns_item { char *domain; char *ip; }; int dns_create_header(struct dns_header *header) { if (header == NULL) return -1; memset(header, 0, sizeof(struct dns_header)); srandom(time(NULL)); header-&amp;gt;id = random(); header-&amp;gt;flags |= htons(0x0100); header-&amp;gt;qdcount = htons(1); return 0; } int dns_create_question(struct dns_question *question, const char *hostname) { if (question == NULL) return -1; memset(question, 0, sizeof(struct dns_question)); question-&amp;gt;qname = (char*)malloc(strlen(hostname) + 2); if (question-&amp;gt;qname == NULL) return -2; question-&amp;gt;length = strlen(hostname) + 2; question-&amp;gt;qtype = htons(1); question-&amp;gt;qclass = htons(1); const char delim[2] = &amp;#34;.</description>
    </item>
    
    <item>
      <title>连接池</title>
      <link>https://gao377020481.github.io/p/%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gao377020481.github.io/p/%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>mysql连接池 头文件： #ifndef DBPOOL_H_ #define DBPOOL_H_  #include &amp;lt;iostream&amp;gt;#include &amp;lt;list&amp;gt;#include &amp;lt;mutex&amp;gt;#include &amp;lt;condition_variable&amp;gt;#include &amp;lt;map&amp;gt;#include &amp;lt;stdint.h&amp;gt; #include &amp;lt;mysql.h&amp;gt; #define MAX_ESCAPE_STRING_LEN	10240  using namespace std; // 返回结果 select的时候用 class CResultSet { public: CResultSet(MYSQL_RES* res); virtual ~CResultSet(); bool Next(); int GetInt(const char* key); char* GetString(const char* key); private: int _GetIndex(const char* key); MYSQL_RES* m_res; MYSQL_ROW	m_row; map&amp;lt;string, int&amp;gt;	m_key_map; }; // 插入数据用 class CPrepareStatement { public: CPrepareStatement(); virtual ~CPrepareStatement(); bool Init(MYSQL* mysql, string&amp;amp; sql); void SetParam(uint32_t index, int&amp;amp; value); void SetParam(uint32_t index, uint32_t&amp;amp; value); void SetParam(uint32_t index, string&amp;amp; value); void SetParam(uint32_t index, const string&amp;amp; value); bool ExecuteUpdate(); uint32_t GetInsertId(); private: MYSQL_STMT*	m_stmt; MYSQL_BIND*	m_param_bind; uint32_t	m_param_cnt; }; class CDBPool; class CDBConn { public: CDBConn(CDBPool* pDBPool); virtual ~CDBConn(); int Init(); // 创建表 	bool ExecuteCreate(const char* sql_query); // 删除表 	bool ExecuteDrop(const char* sql_query); // 查询 	CResultSet* ExecuteQuery(const char* sql_query); /** * 执行DB更新，修改 * * @param sql_query sql * @param care_affected_rows 是否在意影响的行数，false:不在意；true:在意 * * @return 成功返回true 失败返回false */ bool ExecuteUpdate(const char* sql_query, bool care_affected_rows = true); uint32_t GetInsertId(); // 开启事务 	bool StartTransaction(); // 提交事务 	bool Commit(); // 回滚事务 	bool Rollback(); // 获取连接池名 	const char* GetPoolName(); MYSQL* GetMysql() { return m_mysql; } private: CDBPool* m_pDBPool;	// to get MySQL server information 	MYSQL* m_mysql;	// 对应一个连接 	char	m_escape_string[MAX_ESCAPE_STRING_LEN + 1]; }; class CDBPool {	// 只是负责管理连接CDBConn，真正干活的是CDBConn public: CDBPool() {} CDBPool(const char* pool_name, const char* db_server_ip, uint16_t db_server_port, const char* username, const char* password, const char* db_name, int max_conn_cnt); virtual ~CDBPool(); int Init();	// 连接数据库，创建连接 	CDBConn* GetDBConn(const int timeout_ms = -1);	// 获取连接资源 	void RelDBConn(CDBConn* pConn);	// 归还连接资源  const char* GetPoolName() { return m_pool_name.</description>
    </item>
    
  </channel>
</rss>
